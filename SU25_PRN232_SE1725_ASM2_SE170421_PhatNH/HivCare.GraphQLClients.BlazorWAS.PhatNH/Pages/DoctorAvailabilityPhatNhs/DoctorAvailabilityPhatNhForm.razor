@page "/DoctorAvailabilityPhatNhs/DoctorAvailabilityPhatNhForm/{DoctorAvailabilityPhatNhId:int?}"
@using HivCare.GraphQLClients.BlazorWAS.PhatNH.Models
@inject GraphQLConsumer GraphQLConsumer
@inject NavigationManager NavigationManager

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading data...</p>
    </div>
}
else if (hasError)
{
    <div class="alert alert-danger">
        <i class="fas fa-exclamation-triangle"></i> Error loading data. Please try again.
    </div>
}
else
{
    <EditForm Model="@DoctorAvailabilityPhatNh" OnValidSubmit="async() => await SaveDoctorAvailabilityPhatNh()">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="card shadow-sm rounded">
            <div class="card-header bg-primary text-white rounded-top-4">
                <h4 class="mb-0">🏥 Doctor Availability Form</h4>
            </div>
            <div class="card-body bg-primary bg-opacity-25">
                <div class="row g-3">

                    <div class="col-md-6">
                        <label>Doctor Email</label>
                        <InputSelect class="form-control" @bind-Value="DoctorAvailabilityPhatNh.DoctorPhatNhiD" >
                            @if (doctorPhatNhsResponses != null)
                            {
                                @foreach (var item in doctorPhatNhsResponses)
                                {
                                    <option value="@item.DoctorPhatNhiD">@item.Email</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => DoctorAvailabilityPhatNh.DoctorPhatNhiD)" />
                    </div>

                    <div class="col-md-6">
                        <label>Day of Week</label>
                        <InputSelect class="form-control" @bind-Value="DoctorAvailabilityPhatNh.DayOfWeek">
                            <option value="Monday">Monday</option>
                            <option value="Tuesday">Tuesday</option>
                            <option value="Wednesday">Wednesday</option>
                            <option value="Thursday">Thursday</option>
                            <option value="Friday">Friday</option>
                            <option value="Saturday">Saturday</option>
                            <option value="Sunday">Sunday</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => DoctorAvailabilityPhatNh.DayOfWeek)" />
                    </div>

                    <div class="col-md-6">
                        <label>Start Time</label>
                        <InputDate Type="InputDateType.Time" class="form-control" @bind-Value="DoctorAvailabilityPhatNh.StartTime" />
                        <ValidationMessage For="@(() => DoctorAvailabilityPhatNh.StartTime)" />
                    </div>

                    <div class="col-md-6">
                        <label>End Time</label>
                        <InputDate Type="InputDateType.Time" class="form-control" @bind-Value="DoctorAvailabilityPhatNh.EndTime" />
                        <ValidationMessage For="@(() => DoctorAvailabilityPhatNh.EndTime)" />
                    </div>

                    <div class="col-md-6">
                        <label>Specific Date</label>
                        <InputDate class="form-control" @bind-Value="DoctorAvailabilityPhatNh.SpecificDate" />
                        <ValidationMessage For="@(() => DoctorAvailabilityPhatNh.SpecificDate)" />
                    </div>

                    <div class="col-md-6">
                        <label>Max Appointments</label>
                        <InputNumber class="form-control" @bind-Value="DoctorAvailabilityPhatNh.MaxAppointments" />
                        <ValidationMessage For="@(() => DoctorAvailabilityPhatNh.MaxAppointments)" />
                    </div>

                    <div class="col-md-6">
                        <label>Break Start Time</label>
                        <InputDate Type="InputDateType.Time" class="form-control" @bind-Value="DoctorAvailabilityPhatNh.BreakStartTime" />
                        <ValidationMessage For="@(() => DoctorAvailabilityPhatNh.BreakStartTime)" />
                    </div>

                    <div class="col-md-6">
                        <label>Break End Time</label>
                        <InputDate Type="InputDateType.Time" class="form-control" @bind-Value="DoctorAvailabilityPhatNh.BreakEndTime" />
                        <ValidationMessage For="@(() => DoctorAvailabilityPhatNh.BreakEndTime)" />
                    </div>

                    <div class="col-md-6">
                        <label>Status</label>
                        <InputSelect class="form-control" @bind-Value="DoctorAvailabilityPhatNh.Status" disabled>
                            <option value="available">Available</option>
                            <option value="leave">Leave</option>
                            <option value="unavailable">Unavailable</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => DoctorAvailabilityPhatNh.Status)" />
                    </div>

                    <div class="col-md-3">
                        <label>Emergency Available</label>
                        <InputCheckbox class="form-check-input" @bind-Value="DoctorAvailabilityPhatNh.IsEmergencyAvailable" />
                        <ValidationMessage For="@(() => DoctorAvailabilityPhatNh.IsEmergencyAvailable)" />
                    </div>

                    <div class="col-12">
                        <label>Notes</label>
                        <InputTextArea class="form-control" rows="3" @bind-Value="DoctorAvailabilityPhatNh.Notes" />
                        <ValidationMessage For="@(() => DoctorAvailabilityPhatNh.Notes)" />
                    </div>

                    <div class="col-12 d-flex justify-content-end">
                        <button type="button" class="btn btn-secondary me-2" @onclick="Cancel">
                            ❌ Cancel
                        </button>
                        <button type="submit" class="btn btn-success">
                            💾 Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int? DoctorAvailabilityPhatNhId { get; set; }
    public List<DoctorPhatNh> doctorPhatNhsResponses { get; set; }
    private DoctorAvailabilityPhatNh DoctorAvailabilityPhatNh = new();
    private bool isLoading = true;
    private bool hasError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Always load doctors list
            doctorPhatNhsResponses = await GraphQLConsumer.GetDoctorPhatNhs();

            if (DoctorAvailabilityPhatNhId.HasValue && DoctorAvailabilityPhatNhId.Value > 0)
            {
                // Edit mode - load existing data
                DoctorAvailabilityPhatNh = await GraphQLConsumer.GetDoctorAvailabilityPhatNh(DoctorAvailabilityPhatNhId.Value);

                // Check if data was actually found
                if (DoctorAvailabilityPhatNh == null)
                {
                    hasError = true;
                    return;
                }
            }
            else
            {
                // Create mode - initialize new object
                DoctorAvailabilityPhatNh = new DoctorAvailabilityPhatNh()
                    {
                        StartTime = DateTime.Today.AddHours(7).AddMinutes(30),
                        EndTime = DateTime.Today.AddHours(17).AddMinutes(30),
                        MaxAppointments = 1,
                        BreakStartTime = DateTime.Today.AddHours(12),
                        BreakEndTime = DateTime.Today.AddHours(12).AddMinutes(30),
                        CreatedAt = DateTime.Now,
                        Status = "available", // Changed from "Active" to match dropdown options
                        IsEmergencyAvailable = false,
                        SpecificDate = DateTime.Now,
                        DayOfWeek = GetDate((int)DateTime.Today.DayOfWeek)

                    };
            }



        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            hasError = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    protected async Task SaveDoctorAvailabilityPhatNh()
    {
        try
        {
            var result = 0;

            if (DoctorAvailabilityPhatNhId.HasValue && DoctorAvailabilityPhatNhId.Value > 0)
            {
                // Update mode
                DoctorAvailabilityPhatNh.UpdatedAt = DateTime.Now;
                result = await GraphQLConsumer.UpdateDoctorAvailabilityPhatNh(DoctorAvailabilityPhatNh);
            }
            else
            {
                // Create mode
                DoctorAvailabilityPhatNh.CreatedAt = DateTime.Now;
                result = await GraphQLConsumer.CreateDoctorAvailabilityPhatNh(DoctorAvailabilityPhatNh);
            }

            if (result > 0)
            {
                NavigationManager.NavigateTo("/DoctorAvailabilityPhatNhs/DoctorAvailabilityPhatNhList");
            }
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a toast or error message
            Console.WriteLine($"Error saving doctor availability: {ex.Message}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/DoctorAvailabilityPhatNhs/DoctorAvailabilityPhatNhList");
    }
    private string GetDate(int dateNumber)
    {
        string[] daysOfWeek = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

        if (dateNumber < 0 || dateNumber >= daysOfWeek.Length)
            return "Sunday"; // Giá trị mặc định

        return daysOfWeek[dateNumber];
    }
}