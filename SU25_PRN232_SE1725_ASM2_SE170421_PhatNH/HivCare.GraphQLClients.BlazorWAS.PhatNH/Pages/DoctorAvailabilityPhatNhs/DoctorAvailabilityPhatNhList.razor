@page "/DoctorAvailabilityPhatNhs/DoctorAvailabilityPhatNhList"
@using HivCare.GraphQLClients.BlazorWAS.PhatNH.Models
@inject GraphQLConsumer GraphQLConsumer
@inject NavigationManager Navigation

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Doctor Availability Management</h3>
        <div>
            <button class="btn btn-primary me-2" @onclick="RefreshData" disabled="@isLoading">
                <i class="fas fa-sync-alt"></i> Refresh
            </button>
            <button class="btn btn-success" @onclick="AddNew">
                <i class="fas fa-plus"></i> Add New
            </button>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header bg-light">
            <h5 class="mb-0">Search and Filter</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label for="searchNotes" class="form-label">Notes</label>
                    <input type="text" class="form-control" id="searchNotes" @bind-value="searchRequest.Notes" placeholder="Search by notes">
                </div>
                <div class="col-md-4">
                    <label for="searchStatus" class="form-label">Status</label>
                    <input type="text" class="form-control" id="searchStatus" @bind-value="searchRequest.Status" placeholder="Search by status">
                </div>
                <div class="col-md-4">
                    <label for="searchDayOfWeek" class="form-label">Day of Week</label>
                    <input type="text" class="form-control" id="searchDayOfWeek" @bind-value="searchRequest.DayOfWeek" placeholder="Search by day of week">
                </div>
            </div>
            <div class="mt-3 text-end">
                <button class="btn btn-info me-2" @onclick="ApplySearch">
                    <i class="fas fa-search"></i> Search
                </button>
                <button class="btn btn-secondary" @onclick="ClearSearch">
                    <i class="fas fa-undo"></i> Clear
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading data...</p>
        </div>
    }
    else if (paginationResult == null || !paginationResult.items.Any())
    {
        <div class="alert alert-info">
            <div class="d-flex align-items-center">
                <i class="fas fa-info-circle me-2"></i>
                <div>
                    <h5 class="alert-heading">No Data Available</h5>
                    <p class="mb-0">No doctor availability schedules have been set or found with the current filters.</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Doctor Name</th> @* Changed from Doctor ID to Doctor Name *@
                                <th>Day of Week</th>
                                <th>Working Hours</th>
                                <th>Specific Date</th>
                                <th>Max Appointments</th>
                                <th>Break Time</th>
                                <th>Status</th>
                                <th>Emergency</th>
                                <th>Notes</th>
                                <th>Created At</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var availability in paginationResult.items)
                            {
                                <tr>
                                    <td>
                                        <span class="badge bg-secondary">@availability.DoctorAvailabilityPhatNhiD</span>
                                    </td>
                                    <td>
                                        <span class="badge bg-info">@(availability.DoctorPhatNh?.FullName ?? "N/A")</span> @* Display Doctor FullName *@
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(availability.DayOfWeek))
                                        {
                                            <span class="badge @GetDayOfWeekClass(availability.DayOfWeek)">
                                                @availability.DayOfWeek
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (availability.StartTime.HasValue && availability.EndTime.HasValue)
                                        {
                                            <div class="d-flex flex-column">
                                                <small class="text-success">
                                                    <i class="fas fa-clock me-1"></i>@availability.StartTime.Value.ToString("HH:mm")
                                                </small>
                                                <small class="text-danger">
                                                    <i class="fas fa-clock me-1"></i>@availability.EndTime.Value.ToString("HH:mm")
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not set</span>
                                        }
                                    </td>
                                    <td>
                                        @if (availability.SpecificDate.HasValue)
                                        {
                                            <span class="badge bg-warning text-dark">
                                                @availability.SpecificDate.Value.ToString("dd/MM/yyyy")
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (availability.MaxAppointments.HasValue)
                                        {
                                            <span class="badge bg-primary">@availability.MaxAppointments.Value</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Unlimited</span>
                                        }
                                    </td>
                                    <td>
                                        @if (availability.BreakStartTime.HasValue && availability.BreakEndTime.HasValue)
                                        {
                                            <div class="text-center">
                                                <small class="text-warning">
                                                    <i class="fas fa-coffee me-1"></i>
                                                    @availability.BreakStartTime.Value.ToString("HH:mm") - @availability.BreakEndTime.Value.ToString("HH:mm")
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">None</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusClass(availability.Status)">
                                            @availability.Status
                                        </span>
                                    </td>
                                    <td>
                                        @if (availability.IsEmergencyAvailable)
                                        {
                                            <span class="badge bg-success">
                                                <i class="fas fa-ambulance me-1"></i>Yes
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">
                                                <i class="fas fa-times me-1"></i>No
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(availability.Notes))
                                        {
                                            <span title="@availability.Notes" class="text-truncate d-inline-block" style="max-width: 150px;">
                                                @availability.Notes
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (availability.CreatedAt.HasValue)
                                        {
                                            <small class="text-muted">
                                                @availability.CreatedAt.Value.ToString("dd/MM/yyyy HH:mm")
                                            </small>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-info" @onclick="() => ViewDetail(availability.DoctorAvailabilityPhatNhiD)" title="View Details">
                                                <i class="fas fa-eye"></i> Detail
                                            </button>
                                            <button class="btn btn-sm btn-outline-warning" @onclick="() => EditAvailability(availability.DoctorAvailabilityPhatNhiD)" title="Edit">
                                                <i class="fas fa-edit"></i> Edit
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteConfirmation(availability)" title="Delete">
                                                <i class="fas fa-trash"></i> Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <nav aria-label="Page navigation" class="mt-3">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(paginationResult.currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(1)" aria-label="First">
                                <span aria-hidden="true">&laquo;&laquo;</span>
                            </button>
                        </li>
                        <li class="page-item @(paginationResult.currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(paginationResult.currentPage - 1)" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </button>
                        </li>
                        @for (int i = 1; i <= paginationResult.totalPages; i++)
                        {
                            <li class="page-item @(i == paginationResult.currentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                            </li>
                        }
                        <li class="page-item @(paginationResult.currentPage == paginationResult.totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(paginationResult.currentPage + 1)" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </button>
                        </li>
                        <li class="page-item @(paginationResult.currentPage == paginationResult.totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(paginationResult.totalPages)" aria-label="Last">
                                <span aria-hidden="true">&raquo;&raquo;</span>
                            </button>
                        </li>
                    </ul>
                </nav>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <small class="text-muted">
                        <i class="fas fa-info-circle me-1"></i>
                        Showing <strong>@paginationResult.items.Count</strong> of <strong>@paginationResult.totalPages</strong> records. Page <strong>@paginationResult.currentPage</strong> of <strong>@paginationResult.totalPages</strong>.
                    </small>

                    <div class="d-flex gap-2">
                        <small class="text-muted">Last updated: @DateTime.Now.ToString("dd/MM/yyyy HH:mm")</small>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="modal fade @(showDeleteModal ? "show" : "")" id="deleteModal" tabindex="-1" style="display: @(showDeleteModal ? "block" : "none")" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" @onclick="HideDeleteConfirmation"></button>
            </div>
            <div class="modal-body">
                @if (availabilityToDelete != null)
                {
                    <div class="alert alert-warning">
                        <i class="fas fa-warning me-2"></i>
                        <strong>Warning!</strong> This action cannot be undone.
                    </div>

                    <p>Are you sure you want to delete this doctor availability schedule?</p>

                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <strong>ID:</strong> @availabilityToDelete.DoctorAvailabilityPhatNhiD
                                </div>
                                <div class="col-md-6">
                                    <strong>Doctor ID:</strong> @availabilityToDelete.DoctorPhatNhiD
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-md-6">
                                    <strong>Day:</strong> @(availabilityToDelete.DayOfWeek ?? "N/A")
                                </div>
                                <div class="col-md-6">
                                    <strong>Status:</strong>
                                    <span class="badge @GetStatusClass(availabilityToDelete.Status)">
                                        @availabilityToDelete.Status
                                    </span>
                                </div>
                            </div>
                            @if (availabilityToDelete.StartTime.HasValue && availabilityToDelete.EndTime.HasValue)
                            {
                                <div class="row mt-2">
                                    <div class="col-12">
                                        <strong>Working Hours:</strong>
                                        @availabilityToDelete.StartTime.Value.ToString("HH:mm") - @availabilityToDelete.EndTime.Value.ToString("HH:mm")
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideDeleteConfirmation" disabled="@isDeleting">
                    <i class="fas fa-times me-1"></i> Cancel
                </button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">
                    @if (isDeleting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Deleting...</span>
                    }
                    else
                    {
                        <i class="fas fa-trash me-1"></i>
                        <span>Delete</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@if (showDeleteModal)
{
    <div class="modal-backdrop fade show"></div>
}

@if (showSuccessMessage)
{
    <div class="toast-container position-fixed top-0 end-0 p-3">
        <div class="toast show" role="alert">
            <div class="toast-header bg-success text-white">
                <i class="fas fa-check-circle me-2"></i>
                <strong class="me-auto">Success</strong>
                <button type="button" class="btn-close btn-close-white" @onclick="() => showSuccessMessage = false"></button>
            </div>
            <div class="toast-body">
                Doctor availability has been deleted successfully!
            </div>
        </div>
    </div>
}

@if (showErrorMessage)
{
    <div class="toast-container position-fixed top-0 end-0 p-3">
        <div class="toast show" role="alert">
            <div class="toast-header bg-danger text-white">
                <i class="fas fa-exclamation-circle me-2"></i>
                <strong class="me-auto">Error</strong>
                <button type="button" class="btn-close btn-close-white" @onclick="() => showErrorMessage = false"></button>
            </div>
            <div class="toast-body">
                @errorMessage
            </div>
        </div>
    </div>
}

<style>
    .modal {
        background-color: rgba(0, 0, 0, 0.5);
    }

    .toast-container {
        z-index: 1060;
    }

    .modal-dialog-centered {
        min-height: calc(100% - 3.5rem);
    }
</style>

@code {
    private PaginationResult paginationResult = new(); // Changed from List<DoctorAvailabilityPhatNh>
    private ClassSearchDoctorRequestInput searchRequest = new ClassSearchDoctorRequestInput
        {
            CurrentPage = 1,
            PageSize = 10, // Default page size
            Notes = "",
            Status = "",
            DayOfWeek = ""
        };
    private bool isLoading = true;
    private bool showDeleteModal = false;
    private bool isDeleting = false;
    private DoctorAvailabilityPhatNh? availabilityToDelete = null;
    private bool showSuccessMessage = false;
    private bool showErrorMessage = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadDoctorAvailabilities();
    }

    private async Task LoadDoctorAvailabilities()
    {
        try
        {
            isLoading = true;
            // Use GetDoctorAvailabilityPhatNhsWithPagination for all data loading
            paginationResult = await GraphQLConsumer.GetDoctorAvailabilityPhatNhsWithPagination(searchRequest);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading doctor availabilities: {ex.Message}");
            errorMessage = "Failed to load doctor availabilities. Please try again.";
            showErrorMessage = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "available" => "bg-success",
            "leave" => "bg-secondary",
            "holiday" => "bg-warning text-dark",
            _ => "bg-secondary"
        };
    }

    private string GetDayOfWeekClass(string dayOfWeek)
    {
        return dayOfWeek?.ToLower() switch
        {
            "monday" => "bg-primary",
            "tuesday" => "bg-success",
            "wednesday" => "bg-info",
            "thursday" => "bg-warning text-dark",
            "friday" => "bg-danger",
            "saturday" => "bg-secondary",
            "sunday" => "bg-dark",
            _ => "bg-light text-dark"
        };
    }

    private async Task RefreshData()
    {
        // Reset to first page and load with current search filters
        searchRequest.CurrentPage = 1;
        await LoadDoctorAvailabilities();
    }

    private async Task ApplySearch()
    {
        searchRequest.CurrentPage = 1; // Reset to first page when applying search filters
        await LoadDoctorAvailabilities();
    }

    private async Task ClearSearch()
    {
        searchRequest = new ClassSearchDoctorRequestInput
            {
                CurrentPage = 1,
                PageSize = 10,
                Notes = "",
                Status = "",
                DayOfWeek = ""
            };
        await LoadDoctorAvailabilities();
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > paginationResult.totalPages || page == paginationResult.currentPage)
        {
            return;
        }
        searchRequest.CurrentPage = page;
        await LoadDoctorAvailabilities();
    }

    private void AddNew()
    {
        Navigation.NavigateTo($"/DoctorAvailabilityPhatNhs/DoctorAvailabilityPhatNhForm");
    }

    private void ViewDetail(int id)
    {
        Navigation.NavigateTo($"/DoctorAvailabilityPhatNhs/DoctorAvailabilityPhatNhDetail/{id}");
    }

    private void EditAvailability(int id)
    {
        Navigation.NavigateTo($"/DoctorAvailabilityPhatNhs/DoctorAvailabilityPhatNhForm/{id}");
    }

    private void ShowDeleteConfirmation(DoctorAvailabilityPhatNh availability)
    {
        availabilityToDelete = availability;
        showDeleteModal = true;
        StateHasChanged();
    }

    private void HideDeleteConfirmation()
    {
        showDeleteModal = false;
        availabilityToDelete = null;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        if (availabilityToDelete == null) return;

        try
        {
            isDeleting = true;
            StateHasChanged();

            var deleteResult = await GraphQLConsumer.DeleteDoctorAvailabilityPhatNh(availabilityToDelete.DoctorAvailabilityPhatNhiD);

            if (deleteResult)
            {
                showSuccessMessage = true;
                await LoadDoctorAvailabilities(); // Refresh data after deletion
                Console.WriteLine($"Successfully deleted availability ID: {availabilityToDelete.DoctorAvailabilityPhatNhiD}");
            }
            else
            {
                errorMessage = "Failed to delete the doctor availability. Please try again.";
                showErrorMessage = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting availability: {ex.Message}");
            errorMessage = $"An error occurred while deleting: {ex.Message}";
            showErrorMessage = true;
        }
        finally
        {
            isDeleting = false;
            HideDeleteConfirmation();

            // Auto-hide messages after 5 seconds
            if (showSuccessMessage || showErrorMessage)
            {
                await Task.Delay(5000);
                showSuccessMessage = false;
                showErrorMessage = false;
                StateHasChanged();
            }
        }
    }
}