// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using HivCare.Repository.PhatNH.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace HivCare.Repository.PhatNH.DBContext;

public partial class HivCareContext : DbContext
{
    public HivCareContext()
    {
    }

    public HivCareContext(DbContextOptions<HivCareContext> options)
        : base(options)
    {
    }

    public virtual DbSet<DoctorAvailabilityPhatNh> DoctorAvailabilityPhatNhs { get; set; }

    public virtual DbSet<DoctorPhatNh> DoctorPhatNhs { get; set; }

    public virtual DbSet<SystemUserAccount> SystemUserAccounts { get; set; }

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=FAT-LAP\\SQLEXPRESS01;Initial Catalog=HivCare;Integrated Security=True;Encrypt=True");
    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<DoctorAvailabilityPhatNh>(entity =>
        {
            entity.HasKey(e => e.DoctorAvailabilityPhatNhiD).HasName("PK__DoctorAv__C9D05B84588601C3");

            entity.ToTable("DoctorAvailabilityPhatNH");

            entity.Property(e => e.DoctorAvailabilityPhatNhiD)
                .ValueGeneratedNever()
                .HasColumnName("DoctorAvailabilityPhatNHiD");
            entity.Property(e => e.BreakEndTime)
                .HasColumnType("datetime")
                .HasColumnName("break_end_time");
            entity.Property(e => e.BreakStartTime)
                .HasColumnType("datetime")
                .HasColumnName("break_start_time");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.DayOfWeek)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("day_of_week");
            entity.Property(e => e.DoctorPhatNhiD).HasColumnName("DoctorPhatNHiD");
            entity.Property(e => e.EndTime)
                .HasColumnType("datetime")
                .HasColumnName("end_time");
            entity.Property(e => e.IsEmergencyAvailable).HasColumnName("is_emergency_available");
            entity.Property(e => e.MaxAppointments).HasColumnName("max_appointments");
            entity.Property(e => e.Notes)
                .HasMaxLength(100)
                .HasColumnName("notes");
            entity.Property(e => e.SpecificDate)
                .HasColumnType("datetime")
                .HasColumnName("specific_date");
            entity.Property(e => e.StartTime)
                .HasColumnType("datetime")
                .HasColumnName("start_time");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.DoctorPhatNh).WithMany(p => p.DoctorAvailabilityPhatNhs)
                .HasForeignKey(d => d.DoctorPhatNhiD)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DoctorAvailability_Doctor");
        });

        modelBuilder.Entity<DoctorPhatNh>(entity =>
        {
            entity.HasKey(e => e.DoctorPhatNhiD).HasName("PK__DoctorPh__0031D7597D3C4188");

            entity.ToTable("DoctorPhatNH");

            entity.Property(e => e.DoctorPhatNhiD)
                .ValueGeneratedNever()
                .HasColumnName("DoctorPhatNHiD");
            entity.Property(e => e.Bio)
                .HasColumnType("text")
                .HasColumnName("bio");
            entity.Property(e => e.CertificationDetails)
                .HasColumnType("text")
                .HasColumnName("certification_details");
            entity.Property(e => e.ConsultationFee)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("consultation_fee");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Department)
                .HasMaxLength(20)
                .HasColumnName("department");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.ExperienceYears).HasColumnName("experience_years");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.IsAvailableAfterHours)
                .HasDefaultValue(true)
                .HasColumnName("is_available_after_hours");
            entity.Property(e => e.LicenseNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("license_number");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PracticingSince)
                .HasColumnType("datetime")
                .HasColumnName("practicing_since");
            entity.Property(e => e.Rating)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("rating");
            entity.Property(e => e.Specialization)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("specialization");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<SystemUserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId);

            entity.ToTable("System.UserAccount");

            entity.HasIndex(e => e.Email, "UQ_UserAccount_Email").IsUnique();

            entity.HasIndex(e => e.EmployeeCode, "UQ_UserAccount_EmployeeCode").IsUnique();

            entity.HasIndex(e => e.UserName, "UQ_UserAccount_UserName").IsUnique();

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}