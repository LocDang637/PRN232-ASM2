@using Microsoft.AspNetCore.Components
@using SmokeQuit.GraphQLClients.BlazorWAS.LocDPX.Services
@inherits ComponentBase
@inject JwtAuthService JwtAuthService
@inject NavigationManager Navigation
@implements IDisposable

<div class="page">
    @if (JwtAuthService.IsAuthenticated)
    {
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <div class="d-flex justify-content-between align-items-center w-100">
                    <div class="d-flex align-items-center">
                        <span class="me-3">Welcome, @JwtAuthService.CurrentUser?.FullName</span>
                        @if (!string.IsNullOrEmpty(userRole))
                        {
                            <span class="badge bg-secondary">@userRole</span>
                        }
                    </div>
                    <div class="d-flex align-items-center">
                        <small class="text-muted me-3">
                            <i class="bi bi-shield-check text-success"></i> JWT Secured
                        </small>
                        <button class="btn btn-outline-light btn-sm" @onclick="Logout">
                            <i class="bi bi-box-arrow-right"></i> Logout
                        </button>
                    </div>
                </div>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    }
    else
    {
        <main class="w-100">
            @Body
        </main>
    }
</div>

@code {
    [Parameter] public RenderFragment Body { get; set; } = null!;
    
    private string userRole = string.Empty;
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override void OnInitialized()
    {
        JwtAuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
        UpdateUserInfo();
    }

    private void OnAuthenticationStateChanged()
    {
        UpdateUserInfo();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateUserInfo()
    {
        if (JwtAuthService.IsAuthenticated)
        {
            var roleClaim = JwtAuthService.GetClaim("role");
            userRole = roleClaim switch
            {
                "1" => "Admin",
                "2" => "Manager", 
                "3" => "User",
                _ => "User"
            };
        }
        else
        {
            userRole = string.Empty;
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private bool IsAdmin()
    {
        return JwtAuthService.HasRole("1");
    }

    private bool IsManager()
    {
        return JwtAuthService.HasRole("2");
    }

    private string GetTokenExpiration()
    {
        try
        {
            var exp = JwtAuthService.GetClaim("exp");
            if (long.TryParse(exp, out long expUnix))
            {
                var expDate = DateTimeOffset.FromUnixTimeSeconds(expUnix).ToLocalTime();
                return expDate.ToString("MM/dd HH:mm");
            }
        }
        catch { }
        return "Unknown";
    }

    private async Task Logout()
    {
        await JwtAuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        JwtAuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}