@* Updated MainLayout.razor *@
@inherits LayoutView
@inject JwtAuthService JwtAuthService
@inject NavigationManager Navigation
@using SmokeQuit.GraphQLClients.BlazorWAS.LocDPX.Services
@implements IDisposable

<div class="page">
    @if (JwtAuthService.IsAuthenticated)
    {
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <div class="d-flex justify-content-between align-items-center w-100">
                    <div class="d-flex align-items-center">
                        <span class="me-3">Welcome, @JwtAuthService.CurrentUser?.FullName</span>
                        @if (!string.IsNullOrEmpty(userRole))
                        {
                            <span class="badge bg-secondary">@userRole</span>
                        }
                    </div>
                    <div class="d-flex align-items-center">
                        <small class="text-muted me-3">
                            <i class="bi bi-shield-check text-success"></i> JWT Secured
                        </small>
                        <button class="btn btn-outline-light btn-sm" @onclick="Logout">
                            <i class="bi bi-box-arrow-right"></i> Logout
                        </button>
                    </div>
                </div>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    }
    else
    {
        <main class="w-100">
            @Body
        </main>
    }
</div>

@code {
    private string userRole = string.Empty;

    protected override void OnInitialized()
    {
        JwtAuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
        UpdateUserInfo();
    }

    private void OnAuthenticationStateChanged()
    {
        UpdateUserInfo();
        StateHasChanged();
    }

    private void UpdateUserInfo()
    {
        if (JwtAuthService.IsAuthenticated)
        {
            // Get user role from JWT claims
            var roleClaim = JwtAuthService.GetClaim("role");
            userRole = roleClaim switch
            {
                "1" => "Admin",
                "2" => "Manager",
                "3" => "User",
                _ => "User"
            };
        }
    }

    private async Task Logout()
    {
        await JwtAuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        JwtAuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}

@* Updated NavMenu.razor *@
@inject JwtAuthService JwtAuthService
@using SmokeQuit.GraphQLClients.BlazorWAS.LocDPX.Services

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <i class="bi bi-shield-check text-success me-2"></i>SmokeQuit LocDPX
        </a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

@if (JwtAuthService.IsAuthenticated)
{
    <div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
        <nav class="flex-column">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/chats" Match="NavLinkMatch.All">
                    <span class="bi bi-chat-fill-nav-menu" aria-hidden="true"></span> Chats
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/coaches">
                    <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> Coaches
                </NavLink>
            </div>
            
            @* Show additional menu items based on user role *@
            @if (IsAdmin() || IsManager())
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/users">
                        <span class="bi bi-people-fill-nav-menu" aria-hidden="true"></span> Users
                    </NavLink>
                </div>
            }
            
            @if (IsAdmin())
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/admin">
                        <span class="bi bi-gear-fill-nav-menu" aria-hidden="true"></span> Administration
                    </NavLink>
                </div>
            }
        </nav>
        
        <div class="px-3 mt-auto mb-3">
            <hr />
            <div class="text-center">
                <small class="text-muted">
                    <i class="bi bi-person-circle"></i> @JwtAuthService.CurrentUser?.UserName<br />
                    <i class="bi bi-clock"></i> Session expires: @GetTokenExpiration()
                </small>
            </div>
        </div>
    </div>
}

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private bool IsAdmin()
    {
        return JwtAuthService.HasRole("1"); // Role 1 = Admin
    }

    private bool IsManager()
    {
        return JwtAuthService.HasRole("2"); // Role 2 = Manager
    }

    private string GetTokenExpiration()
    {
        try
        {
            var exp = JwtAuthService.GetClaim("exp");
            if (long.TryParse(exp, out long expUnix))
            {
                var expDate = DateTimeOffset.FromUnixTimeSeconds(expUnix).ToLocalTime();
                return expDate.ToString("MM/dd HH:mm");
            }
        }
        catch { }
        return "Unknown";
    }
}

@* Updated Routes.razor *@
@using Microsoft.AspNetCore.Components.Authorization

<CascadingAuthenticationState>
    <Router AppAssembly="typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)">
                <NotAuthorized>
                    <RedirectToLogin />
                </NotAuthorized>
                <Authorizing>
                    <div class="d-flex justify-content-center align-items-center vh-100">
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3">Authenticating...</p>
                        </div>
                    </div>
                </Authorizing>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="routeData" Selector="h1" />
        </Found>
    </Router>
</CascadingAuthenticationState>

@* RedirectToLogin.razor (create new component) *@
@inject NavigationManager Navigation
@code {
    protected override void OnInitialized()
    {
        Navigation.NavigateTo("/login");
    }
}