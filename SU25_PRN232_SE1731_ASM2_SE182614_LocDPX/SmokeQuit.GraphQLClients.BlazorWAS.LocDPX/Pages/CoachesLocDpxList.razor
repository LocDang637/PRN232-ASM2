@page "/coaches"
@attribute [Authorize]
@inject GraphQLConsumer GraphQLConsumer
@inject JwtAuthService JwtAuthService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@using SmokeQuit.GraphQLClients.BlazorWAS.LocDPX.Models
@using SmokeQuit.GraphQLClients.BlazorWAS.LocDPX.GraphQLClients
@using SmokeQuit.GraphQLClients.BlazorWAS.LocDPX.Services

<PageTitle>Coaches - SmokeQuit</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2>
                        <i class="bi bi-people text-primary me-2"></i>Coaches Directory
                    </h2>
                    <p class="text-muted mb-0">
                        <i class="bi bi-shield-check text-success"></i> 
                        Viewing as @JwtAuthService.CurrentUser?.FullName
                    </p>
                </div>
                <div>
                    <button class="btn btn-outline-secondary me-2" @onclick="RefreshCoaches">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                    @if (coaches?.Any() == true)
                    {
                        <span class="badge bg-info">@coaches.Count coaches</span>
                    }
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading coaches...</p>
                </div>
            }
            else if (coaches?.Any() == true)
            {
                <div class="row">
                    @foreach (var coach in coaches)
                    {
                        <div class="col-lg-4 col-md-6 mb-4">
                            <div class="card h-100 coach-card">
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-3">
                                        <div class="avatar-circle me-3">
                                            <i class="bi bi-person-fill"></i>
                                        </div>
                                        <div>
                                            <h5 class="card-title mb-1">@coach.FullName</h5>
                                            <span class="badge bg-primary">
                                                <i class="bi bi-patch-check-fill"></i> Certified Coach
                                            </span>
                                        </div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <div class="mb-2">
                                            <i class="bi bi-envelope text-muted me-2"></i>
                                            <span>@coach.Email</span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(coach.PhoneNumber))
                                        {
                                            <div class="mb-2">
                                                <i class="bi bi-telephone text-muted me-2"></i>
                                                <span>@coach.PhoneNumber</span>
                                            </div>
                                        }
                                        @if (coach.CreatedAt.HasValue)
                                        {
                                            <div class="mb-2">
                                                <i class="bi bi-calendar text-muted me-2"></i>
                                                <small class="text-muted">Joined @coach.CreatedAt.Value.ToString("MMM dd, yyyy")</small>
                                            </div>
                                        }
                                    </div>

                                    @if (!string.IsNullOrEmpty(coach.Bio))
                                    {
                                        <div class="mb-3">
                                            <h6 class="text-muted">Bio:</h6>
                                            <p class="small">@coach.Bio</p>
                                        </div>
                                    }
                                </div>
                                
                                <div class="card-footer bg-transparent">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">
                                            <i class="bi bi-hash"></i>@coach.CoachesLocDpxid
                                        </small>
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewCoachDetails(coach)">
                                            <i class="bi bi-eye"></i> View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i> No coaches found.
                    @if (!JwtAuthService.IsAuthenticated)
                    {
                        <br /><small class="text-muted">Please ensure you're logged in to view coaches.</small>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Coach Details Modal -->
@if (selectedCoach != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-person-circle me-2"></i>Coach Details
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4 text-center mb-3">
                            <div class="avatar-circle-large mx-auto mb-3">
                                <i class="bi bi-person-fill"></i>
                            </div>
                            <h4>@selectedCoach.FullName</h4>
                            <span class="badge bg-primary">Certified Coach</span>
                        </div>
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="fw-bold">Email:</label>
                                <p>@selectedCoach.Email</p>
                            </div>
                            @if (!string.IsNullOrEmpty(selectedCoach.PhoneNumber))
                            {
                                <div class="mb-3">
                                    <label class="fw-bold">Phone:</label>
                                    <p>@selectedCoach.PhoneNumber</p>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(selectedCoach.Bio))
                            {
                                <div class="mb-3">
                                    <label class="fw-bold">Biography:</label>
                                    <p>@selectedCoach.Bio</p>
                                </div>
                            }
                            @if (selectedCoach.CreatedAt.HasValue)
                            {
                                <div class="mb-3">
                                    <label class="fw-bold">Member Since:</label>
                                    <p>@selectedCoach.CreatedAt.Value.ToString("MMMM dd, yyyy")</p>
                                </div>
                            }
                            <div class="mb-3">
                                <label class="fw-bold">Coach ID:</label>
                                <p>@selectedCoach.CoachesLocDpxid</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .coach-card {
        transition: transform 0.2s ease-in-out;
    }
    
    .coach-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .avatar-circle {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        color: white;
    }

    .avatar-circle-large {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 3rem;
        color: white;
    }
</style>

@code {
    private List<CoachesLocDpx> coaches = new();
    private CoachesLocDpx? selectedCoach = null;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCoaches();
    }

    private async Task LoadCoaches()
    {
        if (!JwtAuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        isLoading = true;
        try
        {
            coaches = await GraphQLConsumer.GetCoachesLocDpxes();
        }
        catch (UnauthorizedAccessException)
        {
            await JwtAuthService.LogoutAsync();
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading coaches: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshCoaches()
    {
        await LoadCoaches();
    }

    private void ViewCoachDetails(CoachesLocDpx coach)
    {
        selectedCoach = coach;
    }

    private void CloseModal()
    {
        selectedCoach = null;
    }
}