@page "/login"
@inject JwtAuthService JwtAuthService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Forms
@using SmokeQuit.GraphQLClients.BlazorWAS.LocDPX.Services
@using System.ComponentModel.DataAnnotations
@inject JwtAuthService JwtAuthService
<PageTitle>Login - SmokeQuit</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center">
    <div class="row w-100">
        <div class="col-md-6 col-lg-4 mx-auto">
            <div class="card shadow">
                <div class="card-body p-4">
                    <div class="text-center mb-4">
                        <h2 class="card-title">SmokeQuit LocDPX</h2>
                        <p class="text-muted">Sign in to your account</p>
                    </div>

                    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" class="form-control" @bind-Value="loginModel.Username" placeholder="Enter username" />
                            <ValidationMessage For="@(() => loginModel.Username)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <div class="mb-3 form-check">
                            <input class="form-check-input" type="checkbox" @bind="rememberMe" id="rememberMe">
                            <label class="form-check-label" for="rememberMe">
                                Remember me
                            </label>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>@errorMessage
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success" role="alert">
                                <i class="bi bi-check-circle-fill me-2"></i>@successMessage
                            </div>
                        }

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                <i class="bi bi-box-arrow-in-right me-2"></i>Sign In
                            </button>
                        </div>
                    </EditForm>

                    <div class="text-center mt-3">
                        <small class="text-muted">
                            Secured with JWT Authentication
                            <i class="bi bi-shield-check text-success ms-1"></i>
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;
    private bool rememberMe = false;

    protected override async Task OnInitializedAsync()
    {
        // Initialize JWT service
        await JwtAuthService.InitializeAsync();
        
        // If already authenticated, redirect to chats
        if (JwtAuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/chats");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var result = await JwtAuthService.LoginAsync(loginModel.Username, loginModel.Password);
            
            if (result.Success)
            {
                successMessage = $"Welcome back, {result.User?.FullName}!";
                
                // Small delay to show success message
                await Task.Delay(1000);
                
                Navigation.NavigateTo("/chats");
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, ErrorMessage = "Username must be between 3 and 50 characters", MinimumLength = 3)]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, ErrorMessage = "Password must be at least 6 characters", MinimumLength = 6)]
        public string Password { get; set; } = string.Empty;
    }
}